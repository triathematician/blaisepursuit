/**
 * TaskGenerator.java
 * Created on Jul 17, 2009
 */

package sim.tasks;

import sim.agent.AgentSensorProxy;
import sim.*;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Set;
import sim.agent.SimulationAgent;
import sim.agent.SimulationTeam;

/**
 * <p>
 *   <code>TaskGenerator</code> generates a set of tasks given the current <code>DistanceTable</code>,
 *   list of known opponents, and list of teammates.
 * </p>
 *
 * @author Elisha Peterson
 */
public abstract class Tasker {

    /** 
     * Creates several tasks for a team, based on specified parameters.
     * @param dt the table of distances between agents in the simulation
     * @param owner the class calling the generator
     * @param visibleOpponents the opponents visible to the calling class
     * @param teammates the teammates of the calling class
     * @return list of tasks for this agent and its teammates
     */
    abstract public List<Task> generateGiven(
            DistanceCache dt,
            SimulationTeam owner,
            Collection<? extends AgentSensorProxy> visibleOpponents);

    /**
     * Creates several tasks for a single agent, based on the specified parameters.
     * @param dt the table of distances between agents in the simulation
     * @param owner the class calling the generator
     * @param visibleOpponents the opponents visible to the calling class
     * @param teammates the teammates of the calling class
     * @return list of tasks for this agent and its teammates
     */
    abstract public List<Task> generateGiven(
            DistanceCache dt,
            SimulationAgent owner,
            Collection<? extends AgentSensorProxy> visibleOpponents,
            Collection<SimulationAgent> teammates);

    /** @return the opposing team that is the focus of this task generator. */
    abstract public Set<? extends AgentSensorProxy> getTargetAgents();

    /** @param newTarget the new target team for this task/generator. */
    abstract public void setTargetAgents(Set<? extends AgentSensorProxy> newTarget);

    /** @return default priority value for tasks generated by this method. */
    abstract public double getDefaultPriority();

    /** @param newValue the new value for the default priority. */
    abstract public void setDefaultPriority(double newValue);

    /** @return enum value representing the type of task generated by this class. */
    abstract public Task.Type getTaskType();



    //============================================//
    //                                            //
    //               FACTORY METHODS              //
    //                                            //
    //============================================//


    /** An enum encoding possible generator values */
    public enum TaskerEnum { NONE, AVERAGE_HEADING, CENTER_OF_MASS, CONTROL_CLOSEST, FIND_CLOSEST, FOLLOW, GRADIENT, MULTIPLE, WEIGHTED_AVERAGE_HEADING };

    /** Retrieves an instance of the generator given an enum value */
    public static Tasker getInstance(TaskerEnum value) {
        switch (value) {
            default: return NO_TASKER;
        }
    }
    

    //============================================//
    //                                            //
    //               INNER CLASSES                //
    //                                            //
    //============================================//

    /** An instance of a tasker which does nothing. */
    public static final Tasker NO_TASKER = new Tasker() {
        public List<Task> generateGiven(DistanceCache dt, SimulationTeam owner, Collection<? extends AgentSensorProxy> visibleOpponents) { return Collections.emptyList(); }
        public List<Task> generateGiven(DistanceCache dt, SimulationAgent owner, Collection<? extends AgentSensorProxy> visibleOpponents, Collection<SimulationAgent> teammates) { return Collections.emptyList(); }
        public Set<? extends AgentSensorProxy> getTargetAgents() { return Collections.emptySet(); }
        public void setTargetAgents(Set<? extends AgentSensorProxy> newTarget) { }
        public double getDefaultPriority() { return 1.0; }
        public void setDefaultPriority(double newValue) { }
        public Task.Type getTaskType() { return Task.Type.NONE; }
        @Override public String toString() { return "Tasker - none"; }
    };
}
