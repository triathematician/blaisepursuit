/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package gsim.editor;

import java.awt.event.ActionEvent;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map.Entry;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import sim.agent.*;
import sim.tasks.Router;
import sim.tasks.TaskChooser;
import sim.tasks.Tasker;

/**
 * This represents the master table of actions supported within the simulation for setting and instantiating basic properties.
 *
 * @author ae3263
 */
public class SimActions {
    
    static Icon loadIcon(String path) { return new ImageIcon(SimActions.class.getResource("/gsim/icons/"+path+".png")); }

    public static final HashMap<Class, Action> CLASS_ACTIONS = new HashMap<Class, Action>() {
        {
            put(SimulationTeam.class, new GenericSetAction("Team", loadIcon("team-48"), "A collection of players in the simulation",
                SimulationTeam.class));
            put(SimulationAgent.class, new GenericSetAction("Player", loadIcon("agent-48"), "A single player in the simulation",
                SimulationAgent.class));
            put(SimulationPath.class, new GenericSetAction("Parametric Path", loadIcon("path-agent-48"), "A path generated by a paremetric curve",
                SimulationPath.class));
            put(SimulationRandomPath.class, new GenericSetAction("Random Path", loadIcon("random-agent-48"), "A path generated by a random walk",
                SimulationRandomPath.class));
            put(SimulationObstacle.class, new GenericSetAction("Obstacle", loadIcon("obstacle-48"), "An immobile obstacle",
                SimulationObstacle.class));

            put(LocationGenerator.DELEGATE_INSTANCE.getClass(), new GenericSetAction("Delegate Locations", null, "Delegate locations to players",
                    LocationGenerator.DELEGATE_INSTANCE.getClass()));
            // ...

            put(Sensor.NO_SENSOR.getClass(), new GenericSetAction("No Sensor", loadIcon("sensor-none-48"), "Do not sense any other players",
                    Sensor.NO_SENSOR.getClass()));
            put(Sensor.GLOBAL_SENSOR.getClass(), new GenericSetAction("Global Sensor", loadIcon("sensor-all-48"), "Detect all other players",
                    Sensor.GLOBAL_SENSOR.getClass()));
            put(Sensor.Radial.class, new GenericSetAction("Radial Sensor", loadIcon("sensor-radial-48"), "Detect all players within a given radius",
                    Sensor.Radial.class));
            put(Sensor.Wedge.class, new GenericSetAction("Wedge Sensor", loadIcon("sensor-arc-48"), "Detect all players within a given radius and relative bearing",
                    Sensor.Wedge.class));

            put(Tasker.NO_TASKER.getClass(), new GenericSetAction("No Tasker", null, "Do not generate any tasks",
                    Tasker.NO_TASKER.getClass()));
            // ...

            put(TaskChooser.MAX_CHOOSER.getClass(), new GenericSetAction("Maximum Priority Task", null, "Choose the task with highest priority",
                    TaskChooser.MAX_CHOOSER.getClass()));
            put(TaskChooser.GRADIENT_CHOOSER.getClass(), new GenericSetAction("Gradient Combination", null, "Combine multiple tasks via priority-based gradient",
                    TaskChooser.GRADIENT_CHOOSER.getClass()));

            put(Router.DEFAULT_INSTANCE.getClass(), new GenericSetAction("Straight to Target", loadIcon("pursuit-straight-48"), "Route the player straight to the task",
                    Router.DEFAULT_INSTANCE.getClass()));
            put(Router.Leading.class, new GenericSetAction("Lead Target (CATD)", loadIcon("pursuit-leading-48"), "Route the player ahead of the task (straight-line optimal)",
                    Router.Leading.class));
            put(Router.PluckerLeading.class, new GenericSetAction("Lead Target by Distance", null, "Route the player ahead of the task (based on distance to player)",
                    Router.PluckerLeading.class));
            put(Router.ConstantBearing.class, new GenericSetAction("Constant Bearing", loadIcon("pursuit-angle-48"), "Route the player at a constant relative bearing task",
                    Router.ConstantBearing.class));
            put(Router.Noisy.class, new GenericSetAction("Noisy Router", null, "Route the player using another router, with noise added",
                    Router.Noisy.class));
        }
    };

    public static List<Action> getActionsBySuper(Class cls) {
        ArrayList<Action> result = new ArrayList<Action>();
        for (Entry<Class, Action> en : CLASS_ACTIONS.entrySet())
            if (cls.isAssignableFrom(en.getKey()))
                result.add(en.getValue());
        return result;
    }

    public static Icon getIcon(Class cls) {
        Action ac = CLASS_ACTIONS.get(cls);
        if (ac == null)
            return null;
        return (Icon) ac.getValue(Action.SMALL_ICON);
    }

    static void updateLabel(JLabel label, Object obj, boolean textVisible, boolean iconVisible) {
        Action ac = CLASS_ACTIONS.get(obj.getClass());
        if (ac == null)
            return;
        label.setText(textVisible ? (String) ac.getValue(Action.NAME) : null);
        label.setIcon(iconVisible ? (Icon) ac.getValue(Action.SMALL_ICON) : null);
        label.setToolTipText((String) ac.getValue(Action.SHORT_DESCRIPTION));
    }

    /**
     * An action that instantiates a new object (or returns a static constant),
     * and sets it using a method in the receiver class.
     */
    public static class GenericSetAction extends AbstractAction {
        Constructor constructor;
        Object receiver;
        Method receiveMethod;

        public GenericSetAction(
                String name, Icon icon, String description,
                Class<?> source) {
            putValue(Action.NAME, name);
            putValue(Action.SMALL_ICON, icon);
            putValue(Action.SHORT_DESCRIPTION, description);

            try { constructor = source.getConstructor(); } catch (Exception ex) {}
        }

        public GenericSetAction(
                String name, Icon icon, String description,
                Class<?> source, Object receiver, String methodName) {
            putValue(Action.NAME, name);
            putValue(Action.SMALL_ICON, icon);
            putValue(Action.SHORT_DESCRIPTION, description);

            try { constructor = source.getConstructor(); } catch (Exception ex) {}
            this.receiver = receiver;
            try { receiveMethod = receiver.getClass().getMethod(methodName, source); } catch (Exception ex) {}
        }

        public void actionPerformed(ActionEvent e) {
            if (constructor != null && receiver != null && receiveMethod != null)
                try { receiveMethod.invoke(receiver, constructor.newInstance()); } catch (Exception ex) {}
        }
    }
}
